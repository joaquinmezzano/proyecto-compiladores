Terminals unused in grammar

    CORA
    CORC


State 5 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: PROGRAM LLAA var_decl_list method_decl_list LLAC

    2 var_decl_list: ε
    3              | var_decl_list var_decl

    4 var_decl: TYPE ID OP_IGUAL expr PYC

    5 method_decl_list: ε
    6                 | method_decl_list method_decl

    7 method_decl: TYPE ID PARA param_list_opt PARC block
    8            | VOID ID PARA param_list_opt PARC block
    9            | TYPE ID PARA param_list_opt PARC EXTERN PYC
   10            | VOID ID PARA param_list_opt PARC EXTERN PYC

   11 param_list_opt: ε
   12               | param_list

   13 param_list: TYPE ID
   14           | param_list COMA TYPE ID

   15 block: LLAA var_decl_list statement_list LLAC

   16 statement_list: ε
   17               | statement_list statement

   18 statement: ID OP_IGUAL expr PYC
   19          | ID PARA arg_list_opt PARC PYC
   20          | IF PARA expr PARC THEN block else_opt
   21          | WHILE expr block
   22          | RETURN expr_opt PYC
   23          | PYC
   24          | block

   25 else_opt: ε
   26         | ELSE block

   27 expr_opt: ε
   28         | expr

   29 arg_list_opt: ε
   30             | arg_list

   31 arg_list: expr
   32         | arg_list COMA expr

   33 expr: INTEGER_LITERAL
   34     | TRUE
   35     | FALSE
   36     | ID
   37     | ID PARA arg_list_opt PARC
   38     | PARA expr PARC
   39     | OP_RESTA expr
   40     | OP_NOT expr
   41     | expr OP_SUMA expr
   42     | expr OP_RESTA expr
   43     | expr OP_MULT expr
   44     | expr OP_DIV expr
   45     | expr OP_RESTO expr
   46     | expr OP_MAYOR expr
   47     | expr OP_MENOR expr
   48     | expr OP_COMP expr
   49     | expr OP_AND expr
   50     | expr OP_OR expr

   51 TYPE: INT
   52     | BOOL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER_LITERAL <ival> (258) 33
    ID <sval> (259) 4 7 8 9 10 13 14 18 19 36 37
    INT (260) 51
    BOOL (261) 52
    PROGRAM (262) 1
    VOID (263) 8 10
    EXTERN (264) 9 10
    IF (265) 20
    THEN (266) 20
    ELSE (267) 26
    WHILE (268) 21
    RETURN (269) 22
    TRUE (270) 34
    FALSE (271) 35
    PARA (272) 7 8 9 10 19 20 37 38
    PARC (273) 7 8 9 10 19 20 37 38
    CORA (274)
    CORC (275)
    LLAA (276) 1 15
    LLAC (277) 1 15
    OP_RESTA (278) 39 42
    OP_SUMA (279) 41
    OP_MULT (280) 43
    OP_DIV (281) 44
    OP_RESTO (282) 45
    OP_IGUAL (283) 4 18
    OP_MAYOR (284) 46
    OP_MENOR (285) 47
    OP_COMP (286) 48
    OP_AND (287) 49
    OP_OR (288) 50
    OP_NOT (289) 40
    PYC (290) 4 9 10 18 19 22 23
    COMA (291) 14 32
    UMINUS (292)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    var_decl_list (40)
        on left: 2 3
        on right: 1 3 15
    var_decl (41)
        on left: 4
        on right: 3
    method_decl_list (42)
        on left: 5 6
        on right: 1 6
    method_decl (43)
        on left: 7 8 9 10
        on right: 6
    param_list_opt (44)
        on left: 11 12
        on right: 7 8 9 10
    param_list (45)
        on left: 13 14
        on right: 12 14
    block (46)
        on left: 15
        on right: 7 8 20 21 24 26
    statement_list (47)
        on left: 16 17
        on right: 15 17
    statement (48)
        on left: 18 19 20 21 22 23 24
        on right: 17
    else_opt (49)
        on left: 25 26
        on right: 20
    expr_opt (50)
        on left: 27 28
        on right: 22
    arg_list_opt (51)
        on left: 29 30
        on right: 19 37
    arg_list (52)
        on left: 31 32
        on right: 30 32
    expr (53)
        on left: 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
        on right: 4 18 20 21 28 31 32 38 39 40 41 42 43 44 45 46 47 48 49 50
    TYPE (54)
        on left: 51 52
        on right: 4 7 9 13 14


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM • LLAA var_decl_list method_decl_list LLAC

    LLAA  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM LLAA • var_decl_list method_decl_list LLAC

    $default  reduce using rule 2 (var_decl_list)

    var_decl_list  go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    1 program: PROGRAM LLAA var_decl_list • method_decl_list LLAC
    3 var_decl_list: var_decl_list • var_decl

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    INT       [reduce using rule 5 (method_decl_list)]
    BOOL      [reduce using rule 5 (method_decl_list)]
    $default  reduce using rule 5 (method_decl_list)

    var_decl          go to state 8
    method_decl_list  go to state 9
    TYPE              go to state 10


State 6

   51 TYPE: INT •

    $default  reduce using rule 51 (TYPE)


State 7

   52 TYPE: BOOL •

    $default  reduce using rule 52 (TYPE)


State 8

    3 var_decl_list: var_decl_list var_decl •

    $default  reduce using rule 3 (var_decl_list)


State 9

    1 program: PROGRAM LLAA var_decl_list method_decl_list • LLAC
    6 method_decl_list: method_decl_list • method_decl

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7
    VOID  shift, and go to state 11
    LLAC  shift, and go to state 12

    method_decl  go to state 13
    TYPE         go to state 14


State 10

    4 var_decl: TYPE • ID OP_IGUAL expr PYC

    ID  shift, and go to state 15


State 11

    8 method_decl: VOID • ID PARA param_list_opt PARC block
   10            | VOID • ID PARA param_list_opt PARC EXTERN PYC

    ID  shift, and go to state 16


State 12

    1 program: PROGRAM LLAA var_decl_list method_decl_list LLAC •

    $default  reduce using rule 1 (program)


State 13

    6 method_decl_list: method_decl_list method_decl •

    $default  reduce using rule 6 (method_decl_list)


State 14

    7 method_decl: TYPE • ID PARA param_list_opt PARC block
    9            | TYPE • ID PARA param_list_opt PARC EXTERN PYC

    ID  shift, and go to state 17


State 15

    4 var_decl: TYPE ID • OP_IGUAL expr PYC

    OP_IGUAL  shift, and go to state 18


State 16

    8 method_decl: VOID ID • PARA param_list_opt PARC block
   10            | VOID ID • PARA param_list_opt PARC EXTERN PYC

    PARA  shift, and go to state 19


State 17

    7 method_decl: TYPE ID • PARA param_list_opt PARC block
    9            | TYPE ID • PARA param_list_opt PARC EXTERN PYC

    PARA  shift, and go to state 20


State 18

    4 var_decl: TYPE ID OP_IGUAL • expr PYC

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 28


State 19

    8 method_decl: VOID ID PARA • param_list_opt PARC block
   10            | VOID ID PARA • param_list_opt PARC EXTERN PYC

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 11 (param_list_opt)

    param_list_opt  go to state 29
    param_list      go to state 30
    TYPE            go to state 31


State 20

    7 method_decl: TYPE ID PARA • param_list_opt PARC block
    9            | TYPE ID PARA • param_list_opt PARC EXTERN PYC

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 11 (param_list_opt)

    param_list_opt  go to state 32
    param_list      go to state 30
    TYPE            go to state 31


State 21

   33 expr: INTEGER_LITERAL •

    $default  reduce using rule 33 (expr)


State 22

   36 expr: ID •
   37     | ID • PARA arg_list_opt PARC

    PARA  shift, and go to state 33

    $default  reduce using rule 36 (expr)


State 23

   34 expr: TRUE •

    $default  reduce using rule 34 (expr)


State 24

   35 expr: FALSE •

    $default  reduce using rule 35 (expr)


State 25

   38 expr: PARA • expr PARC

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 34


State 26

   39 expr: OP_RESTA • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 35


State 27

   40 expr: OP_NOT • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 36


State 28

    4 var_decl: TYPE ID OP_IGUAL expr • PYC
   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46
    PYC       shift, and go to state 47


State 29

    8 method_decl: VOID ID PARA param_list_opt • PARC block
   10            | VOID ID PARA param_list_opt • PARC EXTERN PYC

    PARC  shift, and go to state 48


State 30

   12 param_list_opt: param_list •
   14 param_list: param_list • COMA TYPE ID

    COMA  shift, and go to state 49

    $default  reduce using rule 12 (param_list_opt)


State 31

   13 param_list: TYPE • ID

    ID  shift, and go to state 50


State 32

    7 method_decl: TYPE ID PARA param_list_opt • PARC block
    9            | TYPE ID PARA param_list_opt • PARC EXTERN PYC

    PARC  shift, and go to state 51


State 33

   37 expr: ID PARA • arg_list_opt PARC

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    $default  reduce using rule 29 (arg_list_opt)

    arg_list_opt  go to state 52
    arg_list      go to state 53
    expr          go to state 54


State 34

   38 expr: PARA expr • PARC
   41     | expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    PARC      shift, and go to state 55
    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46


State 35

   39 expr: OP_RESTA expr •
   41     | expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    $default  reduce using rule 39 (expr)


State 36

   40 expr: OP_NOT expr •
   41     | expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    $default  reduce using rule 40 (expr)


State 37

   42 expr: expr OP_RESTA • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 56


State 38

   41 expr: expr OP_SUMA • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 57


State 39

   43 expr: expr OP_MULT • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 58


State 40

   44 expr: expr OP_DIV • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 59


State 41

   45 expr: expr OP_RESTO • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 60


State 42

   46 expr: expr OP_MAYOR • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 61


State 43

   47 expr: expr OP_MENOR • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 62


State 44

   48 expr: expr OP_COMP • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 63


State 45

   49 expr: expr OP_AND • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 64


State 46

   50 expr: expr OP_OR • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 65


State 47

    4 var_decl: TYPE ID OP_IGUAL expr PYC •

    $default  reduce using rule 4 (var_decl)


State 48

    8 method_decl: VOID ID PARA param_list_opt PARC • block
   10            | VOID ID PARA param_list_opt PARC • EXTERN PYC

    EXTERN  shift, and go to state 66
    LLAA    shift, and go to state 67

    block  go to state 68


State 49

   14 param_list: param_list COMA • TYPE ID

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    TYPE  go to state 69


State 50

   13 param_list: TYPE ID •

    $default  reduce using rule 13 (param_list)


State 51

    7 method_decl: TYPE ID PARA param_list_opt PARC • block
    9            | TYPE ID PARA param_list_opt PARC • EXTERN PYC

    EXTERN  shift, and go to state 70
    LLAA    shift, and go to state 67

    block  go to state 71


State 52

   37 expr: ID PARA arg_list_opt • PARC

    PARC  shift, and go to state 72


State 53

   30 arg_list_opt: arg_list •
   32 arg_list: arg_list • COMA expr

    COMA  shift, and go to state 73

    $default  reduce using rule 30 (arg_list_opt)


State 54

   31 arg_list: expr •
   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46

    $default  reduce using rule 31 (arg_list)


State 55

   38 expr: PARA expr PARC •

    $default  reduce using rule 38 (expr)


State 56

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   42     | expr OP_RESTA expr •
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41

    $default  reduce using rule 42 (expr)


State 57

   41 expr: expr • OP_SUMA expr
   41     | expr OP_SUMA expr •
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41

    $default  reduce using rule 41 (expr)


State 58

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   43     | expr OP_MULT expr •
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    $default  reduce using rule 43 (expr)


State 59

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   44     | expr OP_DIV expr •
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    $default  reduce using rule 44 (expr)


State 60

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   45     | expr OP_RESTO expr •
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    $default  reduce using rule 45 (expr)


State 61

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   46     | expr OP_MAYOR expr •
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41

    $default  reduce using rule 46 (expr)


State 62

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   47     | expr OP_MENOR expr •
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41

    $default  reduce using rule 47 (expr)


State 63

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   48     | expr OP_COMP expr •
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41

    $default  reduce using rule 48 (expr)


State 64

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   49     | expr OP_AND expr •
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44

    $default  reduce using rule 49 (expr)


State 65

   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr
   50     | expr OP_OR expr •

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45

    $default  reduce using rule 50 (expr)


State 66

   10 method_decl: VOID ID PARA param_list_opt PARC EXTERN • PYC

    PYC  shift, and go to state 74


State 67

   15 block: LLAA • var_decl_list statement_list LLAC

    $default  reduce using rule 2 (var_decl_list)

    var_decl_list  go to state 75


State 68

    8 method_decl: VOID ID PARA param_list_opt PARC block •

    $default  reduce using rule 8 (method_decl)


State 69

   14 param_list: param_list COMA TYPE • ID

    ID  shift, and go to state 76


State 70

    9 method_decl: TYPE ID PARA param_list_opt PARC EXTERN • PYC

    PYC  shift, and go to state 77


State 71

    7 method_decl: TYPE ID PARA param_list_opt PARC block •

    $default  reduce using rule 7 (method_decl)


State 72

   37 expr: ID PARA arg_list_opt PARC •

    $default  reduce using rule 37 (expr)


State 73

   32 arg_list: arg_list COMA • expr

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 78


State 74

   10 method_decl: VOID ID PARA param_list_opt PARC EXTERN PYC •

    $default  reduce using rule 10 (method_decl)


State 75

    3 var_decl_list: var_decl_list • var_decl
   15 block: LLAA var_decl_list • statement_list LLAC

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 16 (statement_list)

    var_decl        go to state 8
    statement_list  go to state 79
    TYPE            go to state 10


State 76

   14 param_list: param_list COMA TYPE ID •

    $default  reduce using rule 14 (param_list)


State 77

    9 method_decl: TYPE ID PARA param_list_opt PARC EXTERN PYC •

    $default  reduce using rule 9 (method_decl)


State 78

   32 arg_list: arg_list COMA expr •
   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46

    $default  reduce using rule 32 (arg_list)


State 79

   15 block: LLAA var_decl_list statement_list • LLAC
   17 statement_list: statement_list • statement

    ID      shift, and go to state 80
    IF      shift, and go to state 81
    WHILE   shift, and go to state 82
    RETURN  shift, and go to state 83
    LLAA    shift, and go to state 67
    LLAC    shift, and go to state 84
    PYC     shift, and go to state 85

    block      go to state 86
    statement  go to state 87


State 80

   18 statement: ID • OP_IGUAL expr PYC
   19          | ID • PARA arg_list_opt PARC PYC

    PARA      shift, and go to state 88
    OP_IGUAL  shift, and go to state 89


State 81

   20 statement: IF • PARA expr PARC THEN block else_opt

    PARA  shift, and go to state 90


State 82

   21 statement: WHILE • expr block

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 91


State 83

   22 statement: RETURN • expr_opt PYC

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    $default  reduce using rule 27 (expr_opt)

    expr_opt  go to state 92
    expr      go to state 93


State 84

   15 block: LLAA var_decl_list statement_list LLAC •

    $default  reduce using rule 15 (block)


State 85

   23 statement: PYC •

    $default  reduce using rule 23 (statement)


State 86

   24 statement: block •

    $default  reduce using rule 24 (statement)


State 87

   17 statement_list: statement_list statement •

    $default  reduce using rule 17 (statement_list)


State 88

   19 statement: ID PARA • arg_list_opt PARC PYC

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    $default  reduce using rule 29 (arg_list_opt)

    arg_list_opt  go to state 94
    arg_list      go to state 53
    expr          go to state 54


State 89

   18 statement: ID OP_IGUAL • expr PYC

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 95


State 90

   20 statement: IF PARA • expr PARC THEN block else_opt

    INTEGER_LITERAL  shift, and go to state 21
    ID               shift, and go to state 22
    TRUE             shift, and go to state 23
    FALSE            shift, and go to state 24
    PARA             shift, and go to state 25
    OP_RESTA         shift, and go to state 26
    OP_NOT           shift, and go to state 27

    expr  go to state 96


State 91

   21 statement: WHILE expr • block
   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    LLAA      shift, and go to state 67
    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46

    block  go to state 97


State 92

   22 statement: RETURN expr_opt • PYC

    PYC  shift, and go to state 98


State 93

   28 expr_opt: expr •
   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46

    $default  reduce using rule 28 (expr_opt)


State 94

   19 statement: ID PARA arg_list_opt • PARC PYC

    PARC  shift, and go to state 99


State 95

   18 statement: ID OP_IGUAL expr • PYC
   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46
    PYC       shift, and go to state 100


State 96

   20 statement: IF PARA expr • PARC THEN block else_opt
   41 expr: expr • OP_SUMA expr
   42     | expr • OP_RESTA expr
   43     | expr • OP_MULT expr
   44     | expr • OP_DIV expr
   45     | expr • OP_RESTO expr
   46     | expr • OP_MAYOR expr
   47     | expr • OP_MENOR expr
   48     | expr • OP_COMP expr
   49     | expr • OP_AND expr
   50     | expr • OP_OR expr

    PARC      shift, and go to state 101
    OP_RESTA  shift, and go to state 37
    OP_SUMA   shift, and go to state 38
    OP_MULT   shift, and go to state 39
    OP_DIV    shift, and go to state 40
    OP_RESTO  shift, and go to state 41
    OP_MAYOR  shift, and go to state 42
    OP_MENOR  shift, and go to state 43
    OP_COMP   shift, and go to state 44
    OP_AND    shift, and go to state 45
    OP_OR     shift, and go to state 46


State 97

   21 statement: WHILE expr block •

    $default  reduce using rule 21 (statement)


State 98

   22 statement: RETURN expr_opt PYC •

    $default  reduce using rule 22 (statement)


State 99

   19 statement: ID PARA arg_list_opt PARC • PYC

    PYC  shift, and go to state 102


State 100

   18 statement: ID OP_IGUAL expr PYC •

    $default  reduce using rule 18 (statement)


State 101

   20 statement: IF PARA expr PARC • THEN block else_opt

    THEN  shift, and go to state 103


State 102

   19 statement: ID PARA arg_list_opt PARC PYC •

    $default  reduce using rule 19 (statement)


State 103

   20 statement: IF PARA expr PARC THEN • block else_opt

    LLAA  shift, and go to state 67

    block  go to state 104


State 104

   20 statement: IF PARA expr PARC THEN block • else_opt

    ELSE  shift, and go to state 105

    $default  reduce using rule 25 (else_opt)

    else_opt  go to state 106


State 105

   26 else_opt: ELSE • block

    LLAA  shift, and go to state 67

    block  go to state 107


State 106

   20 statement: IF PARA expr PARC THEN block else_opt •

    $default  reduce using rule 20 (statement)


State 107

   26 else_opt: ELSE block •

    $default  reduce using rule 26 (else_opt)
