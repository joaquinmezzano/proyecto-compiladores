Terminals unused in grammar

    CORA
    CORC


Grammar

    0 $accept: program $end

    1 program: PROGRAM LLAA decl_list LLAC

    2 decl_list: ε
    3          | decl_list decl

    4 decl: var_decl
    5     | method_decl

    6 var_decl_list: ε
    7              | var_decl_list var_decl

    8 var_decl: TYPE ID OP_IGUAL expr PYC

    9 method_decl: TYPE ID PARA param_list_opt PARC block
   10            | VOID ID PARA param_list_opt PARC block
   11            | TYPE ID PARA param_list_opt PARC EXTERN PYC
   12            | VOID ID PARA param_list_opt PARC EXTERN PYC

   13 param_list_opt: ε
   14               | param_list

   15 param_list: TYPE ID
   16           | param_list COMA TYPE ID

   17 block: LLAA var_decl_list statement_list LLAC

   18 statement_list: ε
   19               | statement_list statement

   20 statement: ID OP_IGUAL expr PYC
   21          | ID PARA arg_list_opt PARC PYC
   22          | IF PARA expr PARC THEN block else_opt
   23          | WHILE expr block
   24          | RETURN expr_opt PYC
   25          | PYC
   26          | block

   27 else_opt: ε
   28         | ELSE block

   29 expr_opt: ε
   30         | expr

   31 arg_list_opt: ε
   32             | arg_list

   33 arg_list: expr
   34         | arg_list COMA expr

   35 expr: INTEGER_LITERAL
   36     | TRUE
   37     | FALSE
   38     | ID
   39     | ID PARA arg_list_opt PARC
   40     | PARA expr PARC
   41     | OP_RESTA expr
   42     | OP_NOT expr
   43     | expr OP_SUMA expr
   44     | expr OP_RESTA expr
   45     | expr OP_MULT expr
   46     | expr OP_DIV expr
   47     | expr OP_RESTO expr
   48     | expr OP_MAYOR expr
   49     | expr OP_MENOR expr
   50     | expr OP_COMP expr
   51     | expr OP_AND expr
   52     | expr OP_OR expr

   53 TYPE: INT
   54     | BOOL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER_LITERAL <ival> (258) 35
    ID <sval> (259) 8 9 10 11 12 15 16 20 21 38 39
    INT (260) 53
    BOOL (261) 54
    PROGRAM (262) 1
    VOID (263) 10 12
    EXTERN (264) 11 12
    IF (265) 22
    THEN (266) 22
    ELSE (267) 28
    WHILE (268) 23
    RETURN (269) 24
    TRUE (270) 36
    FALSE (271) 37
    PARA (272) 9 10 11 12 21 22 39 40
    PARC (273) 9 10 11 12 21 22 39 40
    CORA (274)
    CORC (275)
    LLAA (276) 1 17
    LLAC (277) 1 17
    OP_RESTA (278) 41 44
    OP_SUMA (279) 43
    OP_MULT (280) 45
    OP_DIV (281) 46
    OP_RESTO (282) 47
    OP_IGUAL (283) 8 20
    OP_MAYOR (284) 48
    OP_MENOR (285) 49
    OP_COMP (286) 50
    OP_AND (287) 51
    OP_OR (288) 52
    OP_NOT (289) 42
    PYC (290) 8 11 12 20 21 24 25
    COMA (291) 16 34
    UMINUS (292)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    decl_list (40)
        on left: 2 3
        on right: 1 3
    decl (41)
        on left: 4 5
        on right: 3
    var_decl_list (42)
        on left: 6 7
        on right: 7 17
    var_decl (43)
        on left: 8
        on right: 4 7
    method_decl (44)
        on left: 9 10 11 12
        on right: 5
    param_list_opt (45)
        on left: 13 14
        on right: 9 10 11 12
    param_list (46)
        on left: 15 16
        on right: 14 16
    block (47)
        on left: 17
        on right: 9 10 22 23 26 28
    statement_list (48)
        on left: 18 19
        on right: 17 19
    statement (49)
        on left: 20 21 22 23 24 25 26
        on right: 19
    else_opt (50)
        on left: 27 28
        on right: 22
    expr_opt (51)
        on left: 29 30
        on right: 24
    arg_list_opt (52)
        on left: 31 32
        on right: 21 39
    arg_list (53)
        on left: 33 34
        on right: 32 34
    expr (54)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
        on right: 8 20 22 23 30 33 34 40 41 42 43 44 45 46 47 48 49 50 51 52
    TYPE (55)
        on left: 53 54
        on right: 8 9 11 15 16


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM • LLAA decl_list LLAC

    LLAA  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM LLAA • decl_list LLAC

    $default  reduce using rule 2 (decl_list)

    decl_list  go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    1 program: PROGRAM LLAA decl_list • LLAC
    3 decl_list: decl_list • decl

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7
    VOID  shift, and go to state 8
    LLAC  shift, and go to state 9

    decl         go to state 10
    var_decl     go to state 11
    method_decl  go to state 12
    TYPE         go to state 13


State 6

   53 TYPE: INT •

    $default  reduce using rule 53 (TYPE)


State 7

   54 TYPE: BOOL •

    $default  reduce using rule 54 (TYPE)


State 8

   10 method_decl: VOID • ID PARA param_list_opt PARC block
   12            | VOID • ID PARA param_list_opt PARC EXTERN PYC

    ID  shift, and go to state 14


State 9

    1 program: PROGRAM LLAA decl_list LLAC •

    $default  reduce using rule 1 (program)


State 10

    3 decl_list: decl_list decl •

    $default  reduce using rule 3 (decl_list)


State 11

    4 decl: var_decl •

    $default  reduce using rule 4 (decl)


State 12

    5 decl: method_decl •

    $default  reduce using rule 5 (decl)


State 13

    8 var_decl: TYPE • ID OP_IGUAL expr PYC
    9 method_decl: TYPE • ID PARA param_list_opt PARC block
   11            | TYPE • ID PARA param_list_opt PARC EXTERN PYC

    ID  shift, and go to state 15


State 14

   10 method_decl: VOID ID • PARA param_list_opt PARC block
   12            | VOID ID • PARA param_list_opt PARC EXTERN PYC

    PARA  shift, and go to state 16


State 15

    8 var_decl: TYPE ID • OP_IGUAL expr PYC
    9 method_decl: TYPE ID • PARA param_list_opt PARC block
   11            | TYPE ID • PARA param_list_opt PARC EXTERN PYC

    PARA      shift, and go to state 17
    OP_IGUAL  shift, and go to state 18


State 16

   10 method_decl: VOID ID PARA • param_list_opt PARC block
   12            | VOID ID PARA • param_list_opt PARC EXTERN PYC

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 13 (param_list_opt)

    param_list_opt  go to state 19
    param_list      go to state 20
    TYPE            go to state 21


State 17

    9 method_decl: TYPE ID PARA • param_list_opt PARC block
   11            | TYPE ID PARA • param_list_opt PARC EXTERN PYC

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 13 (param_list_opt)

    param_list_opt  go to state 22
    param_list      go to state 20
    TYPE            go to state 21


State 18

    8 var_decl: TYPE ID OP_IGUAL • expr PYC

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 30


State 19

   10 method_decl: VOID ID PARA param_list_opt • PARC block
   12            | VOID ID PARA param_list_opt • PARC EXTERN PYC

    PARC  shift, and go to state 31


State 20

   14 param_list_opt: param_list •
   16 param_list: param_list • COMA TYPE ID

    COMA  shift, and go to state 32

    $default  reduce using rule 14 (param_list_opt)


State 21

   15 param_list: TYPE • ID

    ID  shift, and go to state 33


State 22

    9 method_decl: TYPE ID PARA param_list_opt • PARC block
   11            | TYPE ID PARA param_list_opt • PARC EXTERN PYC

    PARC  shift, and go to state 34


State 23

   35 expr: INTEGER_LITERAL •

    $default  reduce using rule 35 (expr)


State 24

   38 expr: ID •
   39     | ID • PARA arg_list_opt PARC

    PARA  shift, and go to state 35

    $default  reduce using rule 38 (expr)


State 25

   36 expr: TRUE •

    $default  reduce using rule 36 (expr)


State 26

   37 expr: FALSE •

    $default  reduce using rule 37 (expr)


State 27

   40 expr: PARA • expr PARC

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 36


State 28

   41 expr: OP_RESTA • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 37


State 29

   42 expr: OP_NOT • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 38


State 30

    8 var_decl: TYPE ID OP_IGUAL expr • PYC
   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48
    PYC       shift, and go to state 49


State 31

   10 method_decl: VOID ID PARA param_list_opt PARC • block
   12            | VOID ID PARA param_list_opt PARC • EXTERN PYC

    EXTERN  shift, and go to state 50
    LLAA    shift, and go to state 51

    block  go to state 52


State 32

   16 param_list: param_list COMA • TYPE ID

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    TYPE  go to state 53


State 33

   15 param_list: TYPE ID •

    $default  reduce using rule 15 (param_list)


State 34

    9 method_decl: TYPE ID PARA param_list_opt PARC • block
   11            | TYPE ID PARA param_list_opt PARC • EXTERN PYC

    EXTERN  shift, and go to state 54
    LLAA    shift, and go to state 51

    block  go to state 55


State 35

   39 expr: ID PARA • arg_list_opt PARC

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    $default  reduce using rule 31 (arg_list_opt)

    arg_list_opt  go to state 56
    arg_list      go to state 57
    expr          go to state 58


State 36

   40 expr: PARA expr • PARC
   43     | expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    PARC      shift, and go to state 59
    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48


State 37

   41 expr: OP_RESTA expr •
   43     | expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    $default  reduce using rule 41 (expr)


State 38

   42 expr: OP_NOT expr •
   43     | expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    $default  reduce using rule 42 (expr)


State 39

   44 expr: expr OP_RESTA • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 60


State 40

   43 expr: expr OP_SUMA • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 61


State 41

   45 expr: expr OP_MULT • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 62


State 42

   46 expr: expr OP_DIV • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 63


State 43

   47 expr: expr OP_RESTO • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 64


State 44

   48 expr: expr OP_MAYOR • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 65


State 45

   49 expr: expr OP_MENOR • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 66


State 46

   50 expr: expr OP_COMP • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 67


State 47

   51 expr: expr OP_AND • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 68


State 48

   52 expr: expr OP_OR • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 69


State 49

    8 var_decl: TYPE ID OP_IGUAL expr PYC •

    $default  reduce using rule 8 (var_decl)


State 50

   12 method_decl: VOID ID PARA param_list_opt PARC EXTERN • PYC

    PYC  shift, and go to state 70


State 51

   17 block: LLAA • var_decl_list statement_list LLAC

    $default  reduce using rule 6 (var_decl_list)

    var_decl_list  go to state 71


State 52

   10 method_decl: VOID ID PARA param_list_opt PARC block •

    $default  reduce using rule 10 (method_decl)


State 53

   16 param_list: param_list COMA TYPE • ID

    ID  shift, and go to state 72


State 54

   11 method_decl: TYPE ID PARA param_list_opt PARC EXTERN • PYC

    PYC  shift, and go to state 73


State 55

    9 method_decl: TYPE ID PARA param_list_opt PARC block •

    $default  reduce using rule 9 (method_decl)


State 56

   39 expr: ID PARA arg_list_opt • PARC

    PARC  shift, and go to state 74


State 57

   32 arg_list_opt: arg_list •
   34 arg_list: arg_list • COMA expr

    COMA  shift, and go to state 75

    $default  reduce using rule 32 (arg_list_opt)


State 58

   33 arg_list: expr •
   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48

    $default  reduce using rule 33 (arg_list)


State 59

   40 expr: PARA expr PARC •

    $default  reduce using rule 40 (expr)


State 60

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   44     | expr OP_RESTA expr •
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43

    $default  reduce using rule 44 (expr)


State 61

   43 expr: expr • OP_SUMA expr
   43     | expr OP_SUMA expr •
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43

    $default  reduce using rule 43 (expr)


State 62

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   45     | expr OP_MULT expr •
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    $default  reduce using rule 45 (expr)


State 63

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   46     | expr OP_DIV expr •
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    $default  reduce using rule 46 (expr)


State 64

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   47     | expr OP_RESTO expr •
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    $default  reduce using rule 47 (expr)


State 65

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   48     | expr OP_MAYOR expr •
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43

    $default  reduce using rule 48 (expr)


State 66

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   49     | expr OP_MENOR expr •
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43

    $default  reduce using rule 49 (expr)


State 67

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   50     | expr OP_COMP expr •
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43

    $default  reduce using rule 50 (expr)


State 68

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   51     | expr OP_AND expr •
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46

    $default  reduce using rule 51 (expr)


State 69

   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr
   52     | expr OP_OR expr •

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47

    $default  reduce using rule 52 (expr)


State 70

   12 method_decl: VOID ID PARA param_list_opt PARC EXTERN PYC •

    $default  reduce using rule 12 (method_decl)


State 71

    7 var_decl_list: var_decl_list • var_decl
   17 block: LLAA var_decl_list • statement_list LLAC

    INT   shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 18 (statement_list)

    var_decl        go to state 76
    statement_list  go to state 77
    TYPE            go to state 78


State 72

   16 param_list: param_list COMA TYPE ID •

    $default  reduce using rule 16 (param_list)


State 73

   11 method_decl: TYPE ID PARA param_list_opt PARC EXTERN PYC •

    $default  reduce using rule 11 (method_decl)


State 74

   39 expr: ID PARA arg_list_opt PARC •

    $default  reduce using rule 39 (expr)


State 75

   34 arg_list: arg_list COMA • expr

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 79


State 76

    7 var_decl_list: var_decl_list var_decl •

    $default  reduce using rule 7 (var_decl_list)


State 77

   17 block: LLAA var_decl_list statement_list • LLAC
   19 statement_list: statement_list • statement

    ID      shift, and go to state 80
    IF      shift, and go to state 81
    WHILE   shift, and go to state 82
    RETURN  shift, and go to state 83
    LLAA    shift, and go to state 51
    LLAC    shift, and go to state 84
    PYC     shift, and go to state 85

    block      go to state 86
    statement  go to state 87


State 78

    8 var_decl: TYPE • ID OP_IGUAL expr PYC

    ID  shift, and go to state 88


State 79

   34 arg_list: arg_list COMA expr •
   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48

    $default  reduce using rule 34 (arg_list)


State 80

   20 statement: ID • OP_IGUAL expr PYC
   21          | ID • PARA arg_list_opt PARC PYC

    PARA      shift, and go to state 89
    OP_IGUAL  shift, and go to state 90


State 81

   22 statement: IF • PARA expr PARC THEN block else_opt

    PARA  shift, and go to state 91


State 82

   23 statement: WHILE • expr block

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 92


State 83

   24 statement: RETURN • expr_opt PYC

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    $default  reduce using rule 29 (expr_opt)

    expr_opt  go to state 93
    expr      go to state 94


State 84

   17 block: LLAA var_decl_list statement_list LLAC •

    $default  reduce using rule 17 (block)


State 85

   25 statement: PYC •

    $default  reduce using rule 25 (statement)


State 86

   26 statement: block •

    $default  reduce using rule 26 (statement)


State 87

   19 statement_list: statement_list statement •

    $default  reduce using rule 19 (statement_list)


State 88

    8 var_decl: TYPE ID • OP_IGUAL expr PYC

    OP_IGUAL  shift, and go to state 18


State 89

   21 statement: ID PARA • arg_list_opt PARC PYC

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    $default  reduce using rule 31 (arg_list_opt)

    arg_list_opt  go to state 95
    arg_list      go to state 57
    expr          go to state 58


State 90

   20 statement: ID OP_IGUAL • expr PYC

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 96


State 91

   22 statement: IF PARA • expr PARC THEN block else_opt

    INTEGER_LITERAL  shift, and go to state 23
    ID               shift, and go to state 24
    TRUE             shift, and go to state 25
    FALSE            shift, and go to state 26
    PARA             shift, and go to state 27
    OP_RESTA         shift, and go to state 28
    OP_NOT           shift, and go to state 29

    expr  go to state 97


State 92

   23 statement: WHILE expr • block
   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    LLAA      shift, and go to state 51
    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48

    block  go to state 98


State 93

   24 statement: RETURN expr_opt • PYC

    PYC  shift, and go to state 99


State 94

   30 expr_opt: expr •
   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48

    $default  reduce using rule 30 (expr_opt)


State 95

   21 statement: ID PARA arg_list_opt • PARC PYC

    PARC  shift, and go to state 100


State 96

   20 statement: ID OP_IGUAL expr • PYC
   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48
    PYC       shift, and go to state 101


State 97

   22 statement: IF PARA expr • PARC THEN block else_opt
   43 expr: expr • OP_SUMA expr
   44     | expr • OP_RESTA expr
   45     | expr • OP_MULT expr
   46     | expr • OP_DIV expr
   47     | expr • OP_RESTO expr
   48     | expr • OP_MAYOR expr
   49     | expr • OP_MENOR expr
   50     | expr • OP_COMP expr
   51     | expr • OP_AND expr
   52     | expr • OP_OR expr

    PARC      shift, and go to state 102
    OP_RESTA  shift, and go to state 39
    OP_SUMA   shift, and go to state 40
    OP_MULT   shift, and go to state 41
    OP_DIV    shift, and go to state 42
    OP_RESTO  shift, and go to state 43
    OP_MAYOR  shift, and go to state 44
    OP_MENOR  shift, and go to state 45
    OP_COMP   shift, and go to state 46
    OP_AND    shift, and go to state 47
    OP_OR     shift, and go to state 48


State 98

   23 statement: WHILE expr block •

    $default  reduce using rule 23 (statement)


State 99

   24 statement: RETURN expr_opt PYC •

    $default  reduce using rule 24 (statement)


State 100

   21 statement: ID PARA arg_list_opt PARC • PYC

    PYC  shift, and go to state 103


State 101

   20 statement: ID OP_IGUAL expr PYC •

    $default  reduce using rule 20 (statement)


State 102

   22 statement: IF PARA expr PARC • THEN block else_opt

    THEN  shift, and go to state 104


State 103

   21 statement: ID PARA arg_list_opt PARC PYC •

    $default  reduce using rule 21 (statement)


State 104

   22 statement: IF PARA expr PARC THEN • block else_opt

    LLAA  shift, and go to state 51

    block  go to state 105


State 105

   22 statement: IF PARA expr PARC THEN block • else_opt

    ELSE  shift, and go to state 106

    $default  reduce using rule 27 (else_opt)

    else_opt  go to state 107


State 106

   28 else_opt: ELSE • block

    LLAA  shift, and go to state 51

    block  go to state 108


State 107

   22 statement: IF PARA expr PARC THEN block else_opt •

    $default  reduce using rule 22 (statement)


State 108

   28 else_opt: ELSE block •

    $default  reduce using rule 28 (else_opt)
